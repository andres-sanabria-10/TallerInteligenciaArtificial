const { sendMessage } = require('../services/whatsappService'); // ‚úÖ Usar sendMessage consistentemente

// Procesar mensaje entrante (viene del webhook)
const processIncomingMessage = async (messageData) => {
  console.log('üì© MENSAJE RECIBIDO:');
  console.log('- De:', messageData.from);
  console.log('- Contenido:', messageData.body);
  console.log('- Tipo:', messageData.type);

  try {
    // Extraer n√∫mero de tel√©fono y texto del mensaje
    const phoneNumber = messageData.from;
    const messageText = messageData.body;

    // Procesar con la l√≥gica del chatbot
    const response = await handleChatFlow(phoneNumber, messageText);
    
    if (response) {
      // Si la respuesta es un objeto interactivo, convertirla a texto simple
      const textResponse = formatResponseForCli(response);
      
      // ‚úÖ Usar sendMessage consistentemente
      await sendMessage(phoneNumber, textResponse);
      console.log('‚úÖ Respuesta enviada:', textResponse);
    }

  } catch (error) {
    console.error('‚ùå Error procesando mensaje:', error);
    
    // Enviar mensaje de error al usuario
    try {
      await sendMessage(messageData.from, '‚ùå Lo siento, hubo un error. Escribe "menu" para volver al inicio.');
      console.log('‚ö†Ô∏è Mensaje de error enviado al usuario');
    } catch (sendError) {
      console.error('‚ùå Error enviando mensaje de error:', sendError);
    }
  }
};

// ü§ñ L√ìGICA DEL CHATBOT - Adaptada a consultorio odontol√≥gico
const handleChatFlow = async (phoneNumber, messageText) => {
  const normalizedMessage = messageText.toLowerCase().trim();
  
  console.log(`üîÑ Procesando mensaje de ${phoneNumber}: "${normalizedMessage}"`);
  
  // Mensaje de bienvenida
  if (normalizedMessage === 'hola' || normalizedMessage === 'hi' || normalizedMessage === 'menu') {
    return {
      type: 'interactive',
      body: '¬°Hola! üëã Bienvenido a nuestro consultorio odontol√≥gico.\n\n¬øEn qu√© puedo ayudarte hoy?',
      buttons: [
        { id: '1', title: 'üìÖ Agendar cita' },
        { id: '2', title: 'üí∞ Precios' },
        { id: '3', title: '‚ÑπÔ∏è Informaci√≥n' }
      ]
    };
  }
  
  // Manejo de opciones num√©ricas y palabras clave
  if (normalizedMessage === '1' || normalizedMessage.includes('cita') || normalizedMessage.includes('turno')) {
    return 'üìÖ **Agendar Cita**\n\nPara agendar tu cita, por favor comp√°rteme:\n\n‚Ä¢ Tu nombre completo\n‚Ä¢ Fecha preferida\n‚Ä¢ Tipo de tratamiento\n\n¬øCu√°ndo te gustar√≠a la cita?';
  }
  
  if (normalizedMessage === '2' || normalizedMessage.includes('precio') || normalizedMessage.includes('costo')) {
    return {
      type: 'list',
      body: 'üí∞ Nuestros precios por tratamiento:',
      sections: [{
        title: 'Tratamientos',
        rows: [
          { id: 'limpieza', title: 'Limpieza dental', description: '$80.000' },
          { id: 'resina', title: 'Resina', description: '$120.000' },
          { id: 'endodoncia', title: 'Endodoncia', description: '$350.000' }
        ]
      }]
    };
  }
  
  if (normalizedMessage === '3' || normalizedMessage.includes('horario') || normalizedMessage.includes('hora')) {
    return '‚ÑπÔ∏è **Informaci√≥n del Consultorio**\n\nüïê **Horarios:**\n‚Ä¢ Lunes a Viernes: 8:00 AM - 6:00 PM\n‚Ä¢ S√°bados: 8:00 AM - 2:00 PM\n‚Ä¢ Domingos: Cerrado\n\nüìç **Ubicaci√≥n:**\nCalle 123 #45-67, Sogamoso, Boyac√°\n\nEscribe "menu" para volver al inicio.';
  }
  
  if (normalizedMessage.includes('ubicacion') || normalizedMessage.includes('direccion')) {
    return 'üìç **Nuestra Ubicaci√≥n:**\n\nCalle 123 #45-67, Sogamoso, Boyac√°\n\n¬øNecesitas indicaciones espec√≠ficas?\n\nEscribe "menu" para volver al inicio.';
  }
  
  if (normalizedMessage.includes('gracias')) {
    return '¬°De nada! üòä Estoy aqu√≠ para ayudarte. ¬øHay algo m√°s en lo que pueda asistirte?\n\nEscribe "menu" para ver todas las opciones.';
  }
  
  // Respuesta por defecto
  return 'ü§ñ **Consultorio Odontol√≥gico**\n\nSoy tu asistente virtual. Puedo ayudarte con:\n\n‚Ä¢ üìÖ Agendar citas\n‚Ä¢ üí∞ Informaci√≥n de precios\n‚Ä¢ üïê Horarios de atenci√≥n\n‚Ä¢ üìç Ubicaci√≥n\n\nEscribe "menu" para ver las opciones o dime directamente qu√© necesitas.';
};

// Convertir respuestas interactivas a texto simple para CLI
const formatResponseForCli = (response) => {
  // Si es string simple, devolverlo tal como est√°
  if (typeof response === 'string') {
    return response;
  }
  
  // Si es objeto interactivo, convertir a texto
  if (response && response.type === 'interactive') {
    let text = response.body + '\n\n';
    
    if (response.buttons && Array.isArray(response.buttons)) {
      text += 'üëÜ **Opciones disponibles:**\n';
      response.buttons.forEach((button, index) => {
        text += `${button.id || (index + 1)}. ${button.title}\n`;
      });
      text += '\nüí¨ Responde con el n√∫mero de tu opci√≥n.';
    }
    
    return text;
  }
  
  // Si es lista desplegable, convertir a texto
  if (response && response.type === 'list') {
    let text = response.body + '\n\n';
    
    if (response.sections && Array.isArray(response.sections)) {
      response.sections.forEach(section => {
        text += `üìã **${section.title}:**\n`;
        if (section.rows && Array.isArray(section.rows)) {
          section.rows.forEach((row, index) => {
            text += `${index + 1}. ${row.title}`;
            if (row.description) {
              text += ` - ${row.description}`;
            }
            text += '\n';
          });
        }
      });
      text += '\nüí¨ Responde con el n√∫mero de tu opci√≥n.';
    }
    
    return text;
  }
  
  // Por defecto, convertir a string
  return String(response);
};

// Webhook endpoint - recibe mensajes del CLI
const whatsappWebhook = async (req, res) => {
  console.log('üì© WEBHOOK RECIBIDO:', JSON.stringify(req.body, null, 2));
  
  try {
    const messageData = req.body;
    
    // Filtrar mensajes propios y de grupos
    if (messageData.fromMe || messageData.isGroupMsg) {
      console.log('üìµ Mensaje filtrado (propio o de grupo)');
      return res.status(200).json({ success: true, message: 'Mensaje filtrado' });
    }
    
    // Filtrar mensajes que no son de texto
    if (messageData.type !== 'chat') {
      await sendMessage(messageData.from, 'üìù Por favor, env√≠a solo mensajes de texto.');
      return res.status(200).json({ success: true, message: 'Tipo de mensaje no soportado' });
    }
    
    // Procesar mensaje
    await processIncomingMessage(messageData);
    
    res.status(200).json({ success: true });
  } catch (error) {
    console.error('‚ùå Error en webhook:', error);
    res.status(500).json({ error: 'Error procesando webhook' });
  }
};

// Funci√≥n para enviar mensaje manualmente
const sendMessageManually = async (to, message) => {
  try {
    const textResponse = formatResponseForCli(message);
    await sendMessage(to, textResponse);
    console.log(`‚úÖ Mensaje enviado a ${to}: ${textResponse}`);
    return { success: true };
  } catch (error) {
    console.error('‚ùå Error enviando mensaje:', error);
    return { success: false, error: error.message };
  }
};

module.exports = { 
  processIncomingMessage,
  whatsappWebhook,
  sendMessage: sendMessageManually,
  formatResponseForCli,
  handleChatFlow // ‚úÖ Exportar la funci√≥n del chatbot
};